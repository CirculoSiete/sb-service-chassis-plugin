import java.text.SimpleDateFormat

buildscript {
  ext {
    springBootVersion = '2.1.5.RELEASE'
    springCloudVersion = 'Greenwich.SR1'
  }
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    //classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
    classpath "com.github.ben-manes:gradle-versions-plugin:${versionsPluginVersion}"
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

plugins {
  id 'com.github.hierynomus.license' version '0.15.0'
  id 'net.researchgate.release' version '2.8.0'
  id "com.dorongold.task-tree" version "1.3.1"
}


apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'maven'

apply plugin: 'jacoco'
//apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.ben-manes.versions'

repositories {
  jcenter()
  mavenCentral()
  maven {
    url 'http://dl.bintray.com/johnrengelman/gradle-plugins'
  }
}

dependencies {
  compile gradleApi()
  compile localGroovy()
  compile 'com.bmuschko:gradle-docker-plugin:4.9.0'
  compile 'org.yaml:snakeyaml:1.24'
  compile 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.0.1622'
  compile "com.github.ben-manes:gradle-versions-plugin:${versionsPluginVersion}"
  compile 'net.researchgate:gradle-release:2.8.0'
  compile 'com.github.groovy-wslite:groovy-wslite:1.1.3'
  compile "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  compile 'at.phatbl:shellexec:1.2.0'
  compile 'de.vandermeer:asciitable:0.3.2'
}

Date buildTimeAndDate = new Date()
ext {
  buildDate = new SimpleDateFormat('dd-MMM-yyyy').format(buildTimeAndDate)
  buildTime = new SimpleDateFormat('hh:mm aa').format(buildTimeAndDate)
}

def jarManifestAttributes = [
  'Built-By'  : System.properties['user.name'],
  'Created-By': System.properties['java.version'] + ' (' + System.properties['java.vendor'] + ' ' + System.getProperty('java.vm.version') + ')',
  'Build-Date': buildDate,
  'Build-Time': buildTime]

jar {
  manifest {
    attributes(jarManifestAttributes)
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

def javaApiUrl = 'http://docs.oracle.com/javase/1.7.0/docs/api/'
def groovyApiUrl = 'http://groovy.codehaus.org/gapi/'

tasks.withType(Javadoc) {
    options.links(javaApiUrl, groovyApiUrl)
}

if (JavaVersion.current().isJava8Compatible()) {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar, javadocJar
}

jacocoTestReport {
  reports {
    xml.enabled = true // coveralls plugin depends on xml format report
    html.enabled = true
  }
}

license {
  excludes(['**/*.jade4j', '**/*.jade', '**/*.factories'])
  ext.year = Calendar.getInstance().get(Calendar.YEAR)
  ext.name = 'Domingo Suarez Torres'
  ext.email = 'domingo.suarez@gmail.com'

  header rootProject.file('HEADER_LICENSE')
  strictCheck true
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar

      pom.withXml {
        def root = asNode()
        root.appendNode('name', project.pomName)
        root.appendNode('description', project.description)
        root.appendNode('url', 'https://github.com/CirculoSiete/sb-service-chassis-plugin')
        root.appendNode('inceptionYear', '2018')
        root.appendNode('packaging', 'jar')

        def scm = root.appendNode('scm')
        scm.appendNode('url', 'https://github.com/CirculoSiete/sb-service-chassis-plugin')
        scm.appendNode('connection', 'scm:https://domixgithub.com/CirculoSiete/sb-service-chassis-plugin.git')
        scm.appendNode('developerConnection', 'scm:git@github.com:CirculoSiete/sb-service-chassis-plugin.git')

        def license = root.appendNode('licenses').appendNode('license')
        license.appendNode('name', 'The Apache Software License, Version 2.0')
        license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
        license.appendNode('distribution', 'repo')

        def developers = root.appendNode('developers')
        def domix = developers.appendNode('developer')
        domix.appendNode('id', 'domix')
        domix.appendNode('name', 'Domingo Suarez Torres')
        domix.appendNode('email', 'domingo.suarez@gmail.com')


        root.dependencies.'*'.findAll() {
          it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
            dep.name == it.artifactId.text()
          }
        }.each() {
          it.scope*.value = 'compile'
        }
      }
    }
  }
}

bintray {
  user = (System.getenv('BINTRAY_USERNAME') ?: project.properties.getOrDefault('bintrayUsername', ''))
  key = (System.getenv('BINTRAY_APIKEY') ?: project.properties.getOrDefault('bintrayApiKey', ''))

  publications = ['mavenJava']
  dryRun = false //Whether to run this as dry-run, without deploying
  publish = true //If version should be auto published after an upload
  pkg {
    repo = 'oss'
    userOrg = 'circulosiete'
    name = project.name
    desc = project.description
    websiteUrl = 'https://github.com/CirculoSiete/sb-service-chassis-plugin'
    issueTrackerUrl = 'https://github.com/CirculoSiete/sb-service-chassis-plugin/issues'
    vcsUrl = 'https://github.com/CirculoSiete/sb-service-chassis-plugin.git'
    licenses = ['Apache-2.0']
    labels = ['gradle']
    publicDownloadNumbers = true
    attributes = [:]
    //Optional version descriptor
    version {
      name = project.version
      desc = project.description
      gpg {
        sign = project.hasProperty('bintrayGpgPassphrase')
        passphrase = (System.getenv('BINTRAY_GPG_PASSPHRASE') ?: project.properties.getOrDefault('bintrayGpgPassphrase', ''))
      }
      mavenCentralSync {
        sync = false
        user = ''
        password = ''
        close = '1'
      }
    }
  }
}

javadoc.options.links('http://docs.oracle.com/javase/7/docs/api/', 'http://docs.spring.io/spring/docs/4.2.x/javadoc-api/', 'https://docs.oracle.com/javaee/5/api/')

classes.dependsOn licenseFormat
jacocoTestReport.dependsOn check
bintrayUpload.dependsOn jacocoTestReport
createReleaseTag.dependsOn bintrayUpload